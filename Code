#include <WiFiManager.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <TFT_eSPI.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <Timezone.h>

// Proměnné pro řízení aktualizace
unsigned long lastDisplayUpdate = 0;
const unsigned long displayUpdateInterval = 60000;

#define BRIGHTNESS_DAY_INDEX 4
#define BRIGHTNESS_NIGHT_INDEX 0
#define ROTATE_BUTTON_PIN 0

// Nastavení displeje
const int pwmFreq = 10000;
const int pwmResolution = 8;
const int pwmLedChannelTFT = 0;
const int backlight[5] = {15, 30, 60, 120, 250};

TFT_eSPI tft;
int screenRotation = 1;

const char* apiKey = "Your API";
const char* city = "Your City";

// Proměnné pro data
float lat = 0;
float lon = 0;
float currentTemp = 0;
String weatherDescription = "";
float dayTemps[3] = {0};
float nightTemps[3] = {0};
String dates[3] = {"", "", ""};

// Nastavení času
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 0, 60000);

// Definice časových pásem
TimeChangeRule CEST = {"CEST", Last, Sun, Mar, 2, 120};
TimeChangeRule CET = {"CET", Last, Sun, Oct, 3, 60};
Timezone CE(CEST, CET);

unsigned long lastWeatherUpdate = 0;
const unsigned long weatherUpdateInterval = 300000;

// Překladový slovník pro popisy počasí
String translateWeatherDescription(String description) {
  if (description == "clear sky") return "Jasno";
  if (description == "few clouds") return "Malo oblacno";
  if (description == "scattered clouds") return "Rozptylene mraky";
  if (description == "broken clouds") return "Oblacno";
  if (description == "overcast clouds") return "Zatazeno";
  if (description == "light rain") return "Slaby dest";
  if (description == "moderate rain") return "Mirny dest";
  if (description == "heavy intensity rain") return "Silny dest";
  if (description == "very heavy rain") return "Velmi silny dest";
  if (description == "extreme rain") return "Extremni dest";
  if (description == "freezing rain") return "Mrznouci dest";
  if (description == "light intensity shower rain") return "Slaby prehankovy dest";
  if (description == "shower rain") return "Prehankovy dest";
  if (description == "heavy intensity shower rain") return "Silny prehankovy dest";
  if (description == "ragged shower rain") return "Nepravidelny prehankovy dest";
  if (description == "thunderstorm with light rain") return "Bourka se slabym destem";
  if (description == "thunderstorm with rain") return "Bourka s destem";
  if (description == "thunderstorm with heavy rain") return "Bourka se silnym destem";
  if (description == "light thunderstorm") return "Slaba bourka";
  if (description == "thunderstorm") return "Bourka";
  if (description == "heavy thunderstorm") return "Silna bourka";
  if (description == "ragged thunderstorm") return "Nepravidelna bourka";
  if (description == "thunderstorm with light drizzle") return "Bourka se slabym mrzolenim";
  if (description == "thunderstorm with drizzle") return "Bourka s mrzolenim";
  if (description == "thunderstorm with heavy drizzle") return "Bourka se silnym mrzolenim";
  if (description == "light snow") return "Slaby snih";
  if (description == "snow") return "Snih";
  if (description == "heavy snow") return "Silny snih";
  if (description == "sleet") return "Pliskanice";
  if (description == "light shower sleet") return "Slaba prehankova pliskanice";
  if (description == "shower sleet") return "Prehankova pliskanice";
  if (description == "light rain and snow") return "Slaby dest se snehem";
  if (description == "rain and snow") return "Dest se snehem";
  if (description == "light shower snow") return "Slaba prehankova snehova prehankova";
  if (description == "shower snow") return "Prehankova snehova prehankova";
  if (description == "heavy shower snow") return "Silna prehankova snehova prehankova";
  if (description == "mist") return "Mlha";
  if (description == "smoke") return "Kour";
  if (description == "haze") return "Opar";
  if (description == "sand/dust whirls") return "Pisecne/prachove viry";
  if (description == "fog") return "Mlha";
  if (description == "sand") return "Pisek";
  if (description == "dust") return "Prach";
  if (description == "volcanic ash") return "Sopecny popel";
  if (description == "squalls") return "Poryvy vetru";
  if (description == "tornado") return "Tornado";
  if (description == "light intensity drizzle") return "Slabe mrzoleni";
  if (description == "drizzle") return "Mrzoleni";
  if (description == "heavy intensity drizzle") return "Silne mrzoleni";
  if (description == "light intensity drizzle rain") return "Slaby mrzolivy dest";
  if (description == "drizzle rain") return "Mrzolivy dest";
  if (description == "heavy intensity drizzle rain") return "Silny mrzolivy dest";
  if (description == "shower rain and drizzle") return "Prehankovy dest s mrzolenim";
  if (description == "heavy shower rain and drizzle") return "Silny prehankovy dest s mrzolenim";
  if (description == "shower drizzle") return "Prehankove mrzoleni";
  return description;  // Pokud není překlad k dispozici, vrátí původní popis
}

void toggleScreenRotation() {
  screenRotation = (screenRotation == 1) ? 3 : 1;
  tft.setRotation(screenRotation);
  displayData();
}

void updateWeather() {
  ensureWiFiConnected();
  HTTPClient httpCurrentWeather;
  String currentWeatherUrl = "http://api.openweathermap.org/data/2.5/weather?lat=" + String(lat) + "&lon=" + String(lon) + "&appid=" + String(apiKey);
  httpCurrentWeather.begin(currentWeatherUrl);
  int currentWeatherCode = httpCurrentWeather.GET();

  if (currentWeatherCode > 0) {
    String currentWeatherPayload = httpCurrentWeather.getString();
    DynamicJsonDocument currentWeatherDoc(1024);
    deserializeJson(currentWeatherDoc, currentWeatherPayload);
    currentTemp = currentWeatherDoc["main"]["temp"].as<float>() - 273.15;
    weatherDescription = translateWeatherDescription(currentWeatherDoc["weather"][0]["description"].as<String>());
  }
  httpCurrentWeather.end();

  HTTPClient httpWeather;
  String weatherUrl = "https://api.openweathermap.org/data/3.0/onecall?lat=" + String(lat) + "&lon=" + String(lon) + "&exclude=current,minutely,hourly,alerts&appid=" + String(apiKey);
  httpWeather.begin(weatherUrl);
  int weatherCode = httpWeather.GET();

  if (weatherCode > 0) {
    String weatherPayload = httpWeather.getString();
    DynamicJsonDocument weatherDoc(8192);
    deserializeJson(weatherDoc, weatherPayload);

    for (int i = 0; i < 3; i++) {
      time_t forecastTime = weatherDoc["daily"][i]["dt"].as<time_t>();
      time_t localForecastTime = CE.toLocal(forecastTime);
      char dateStr[10];
      sprintf(dateStr, "%d.%d", day(localForecastTime), month(localForecastTime));
      dates[i] = String(dateStr);
      dayTemps[i] = weatherDoc["daily"][i]["temp"]["day"].as<float>() - 273.15;
      nightTemps[i] = weatherDoc["daily"][i]["temp"]["night"].as<float>() - 273.15;
    }
  }
  httpWeather.end();
}

void ensureWiFiConnected() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Reconnecting to WiFi...");
    WiFi.disconnect();
    WiFi.begin();
    
    int retries = 0;
    while (WiFi.status() != WL_CONNECTED && retries < 10) {
      delay(1000);
      Serial.print(".");
      retries++;
    }

    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("WiFi connection failed. Restarting...");
      delay(5000);
      ESP.restart();
    }
  }
}

void displayLoadingScreen() {
  tft.fillScreen(TFT_BLACK);
  tft.setCursor(50, 60);
  tft.setTextColor(TFT_WHITE);
  tft.setTextSize(3);
  tft.println("Loading...");
}

void updateBrightness() {
  int currentHour = hour(CE.toLocal(timeClient.getEpochTime()));
  int brightnessLevel;

  if (currentHour >= 6 && currentHour < 20) {
    brightnessLevel = backlight[BRIGHTNESS_DAY_INDEX];
  } else {
    brightnessLevel = backlight[BRIGHTNESS_NIGHT_INDEX];
  }

  #if ESP_ARDUINO_VERSION < ESP_ARDUINO_VERSION_VAL(3, 0, 0)
    ledcWrite(pwmLedChannelTFT, brightnessLevel);
  #else
    ledcWrite(TFT_BL, brightnessLevel);
  #endif
}

void displayData() {
  tft.fillScreen(TFT_BLACK);
  ensureWiFiConnected();
  
  time_t localTime = CE.toLocal(timeClient.getEpochTime());
  char timeStr[20];
  sprintf(timeStr, "%02d:%02d", hour(localTime), minute(localTime));
  
  tft.setCursor(5, 5);
  tft.setTextColor(TFT_WHITE);
  tft.setTextSize(5);
  tft.println(timeStr);

  tft.setCursor(165, 10);
  tft.setTextColor(TFT_GREEN);
  tft.setTextSize(4);
  tft.print(String(currentTemp, 1));
  tft.setTextSize(2);
  tft.println(" C");

  tft.setCursor(5, 140);
  tft.setTextColor(TFT_CYAN);
  tft.setTextSize(3);
  tft.println(weatherDescription);

  tft.setTextSize(3);
  int yPos = 50;

  for (int i = 0; i < 3; i++) {
    tft.setCursor(5, yPos);
    tft.setTextColor(TFT_ORANGE);
    tft.print(dates[i] + ": ");

    tft.setTextColor(TFT_YELLOW);
    tft.print(String(dayTemps[i], 1));

    tft.setTextColor(TFT_RED);
    tft.print("/");

    tft.setTextColor(TFT_YELLOW);
    tft.print(String(nightTemps[i], 1));

    tft.setTextSize(1);
    tft.println(" C");
    tft.setTextSize(3);
    yPos += 30;
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(ROTATE_BUTTON_PIN, INPUT_PULLUP);
  tft.init();
  tft.setRotation(screenRotation);

  displayLoadingScreen();

  WiFiManager wifiManager;
  if (!wifiManager.autoConnect("LilygoS3_AP")) {
    Serial.println("Failed to connect. Restarting...");
    delay(3000);
    ESP.restart();
  }

  timeClient.begin();
  timeClient.update();

  HTTPClient httpGeo;
  String geoUrl = "http://api.openweathermap.org/geo/1.0/direct?q=" + String(city) + "&limit=1&appid=" + String(apiKey);
  httpGeo.begin(geoUrl);
  
  if (httpGeo.GET() > 0) {
    String geoPayload = httpGeo.getString();
    DynamicJsonDocument geoDoc(1024);
    deserializeJson(geoDoc, geoPayload);
    lat = geoDoc[0]["lat"];
    lon = geoDoc[0]["lon"];
    updateWeather();
  }
  httpGeo.end();

  displayData();

  #if ESP_ARDUINO_VERSION < ESP_ARDUINO_VERSION_VAL(3, 0, 0)
    ledcSetup(pwmLedChannelTFT, pwmFreq, pwmResolution);
    ledcAttachPin(TFT_BL, pwmLedChannelTFT);
  #else
    ledcAttach(TFT_BL, pwmFreq, pwmResolution);
  #endif

  updateBrightness();
}

void loop() {
  ensureWiFiConnected();
  timeClient.update();
  
  unsigned long currentMillis = millis();

  if (currentMillis - lastDisplayUpdate >= displayUpdateInterval) {
    lastDisplayUpdate = currentMillis;
    displayData();
  }

  if (currentMillis - lastWeatherUpdate >= weatherUpdateInterval) {
    lastWeatherUpdate = currentMillis;
    updateWeather();
  }

  updateBrightness();

  if (digitalRead(ROTATE_BUTTON_PIN) == LOW) {
    delay(200);
    toggleScreenRotation();
    while (digitalRead(ROTATE_BUTTON_PIN) == LOW);
    delay(200);
  }
}
